package sortcomparison;

public class BubbleSort extends  Thread{//冒泡排序
    private int []p;
    private int []q;
    private int num;
    public BubbleSort (int []q,int num){ //构造方法
        this.q=q;
        this.num=num;
    }
    long timestart;
    long timeend;
    long  sumtime=0;
    public void run() {
       for (int k=0;k<num;k++) {
           p=q.clone();
//           for(int i=0;i<p.length;i++){
//               System.out.println(p[i]);
//           }
           if (p == null) {
               throw new NullPointerException("内容为空，没有要排序的内容！");
           }

           int t;
           timestart = System.currentTimeMillis(); //返回开始的毫秒数
           //System.out.println("1="+timestart);
           for (int i = 0; i < p.length; i++) {
               for (int j = 0; j < (p.length - i - 1); j++) {
                   if (p[j] > p[j + 1]) {
                       t = p[j];
                       p[j] = p[j + 1];
                       p[j + 1] = t;
                   }
               }// num--;
           }
           timeend = System.currentTimeMillis();//返回结束的毫秒数
//           for(int i=0;i<p.length;i++){
//               System.out.println("排序后"+p[i]);
//           }
           sumtime+=timeend - timestart;
         //  System.out.println("end="+timeend+"strat="+timestart);
           System.out.println("使用冒泡排序所花的时间是：" + (timeend - timestart)+"毫秒"  );
       }
       // System.out.println("2="+timeend);
          // long sumtime=0;

        System.out.println("使用冒泡排序平均所花的时间是：" + (sumtime/num) + "毫秒");

    }

}
























































































































































































































































































































































































































































































































































